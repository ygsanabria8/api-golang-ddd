// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	mediator "api.ddd/pkgs/mediator"
	mock "github.com/stretchr/testify/mock"
)

// IHandler is an autogenerated mock type for the IHandler type
type IHandler struct {
	mock.Mock
}

type IHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *IHandler) EXPECT() *IHandler_Expecter {
	return &IHandler_Expecter{mock: &_m.Mock}
}

// Handler provides a mock function with given fields: _a0
func (_m *IHandler) Handler(_a0 *mediator.Message) (interface{}, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Handler")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(*mediator.Message) (interface{}, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*mediator.Message) interface{}); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(*mediator.Message) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IHandler_Handler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Handler'
type IHandler_Handler_Call struct {
	*mock.Call
}

// Handler is a helper method to define mock.On call
//   - _a0 *mediator.Message
func (_e *IHandler_Expecter) Handler(_a0 interface{}) *IHandler_Handler_Call {
	return &IHandler_Handler_Call{Call: _e.mock.On("Handler", _a0)}
}

func (_c *IHandler_Handler_Call) Run(run func(_a0 *mediator.Message)) *IHandler_Handler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*mediator.Message))
	})
	return _c
}

func (_c *IHandler_Handler_Call) Return(_a0 interface{}, _a1 error) *IHandler_Handler_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IHandler_Handler_Call) RunAndReturn(run func(*mediator.Message) (interface{}, error)) *IHandler_Handler_Call {
	_c.Call.Return(run)
	return _c
}

// NewIHandler creates a new instance of IHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *IHandler {
	mock := &IHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
