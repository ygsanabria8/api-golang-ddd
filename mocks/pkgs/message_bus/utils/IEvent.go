// Code generated by mockery. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// IEvent is an autogenerated mock type for the IEvent type
type IEvent struct {
	mock.Mock
}

type IEvent_Expecter struct {
	mock *mock.Mock
}

func (_m *IEvent) EXPECT() *IEvent_Expecter {
	return &IEvent_Expecter{mock: &_m.Mock}
}

// GetMessage provides a mock function with given fields: obj
func (_m *IEvent) GetMessage(obj interface{}) error {
	ret := _m.Called(obj)

	if len(ret) == 0 {
		panic("no return value specified for GetMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(obj)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IEvent_GetMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMessage'
type IEvent_GetMessage_Call struct {
	*mock.Call
}

// GetMessage is a helper method to define mock.On call
//   - obj interface{}
func (_e *IEvent_Expecter) GetMessage(obj interface{}) *IEvent_GetMessage_Call {
	return &IEvent_GetMessage_Call{Call: _e.mock.On("GetMessage", obj)}
}

func (_c *IEvent_GetMessage_Call) Run(run func(obj interface{})) *IEvent_GetMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *IEvent_GetMessage_Call) Return(_a0 error) *IEvent_GetMessage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IEvent_GetMessage_Call) RunAndReturn(run func(interface{}) error) *IEvent_GetMessage_Call {
	_c.Call.Return(run)
	return _c
}

// NewIEvent creates a new instance of IEvent. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIEvent(t interface {
	mock.TestingT
	Cleanup(func())
}) *IEvent {
	mock := &IEvent{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
