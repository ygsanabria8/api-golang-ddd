// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	aggregates "api.ddd/src/domain/aggregates"

	mock "github.com/stretchr/testify/mock"
)

// IUserRepository is an autogenerated mock type for the IUserRepository type
type IUserRepository struct {
	mock.Mock
}

type IUserRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *IUserRepository) EXPECT() *IUserRepository_Expecter {
	return &IUserRepository_Expecter{mock: &_m.Mock}
}

// CreateUser provides a mock function with given fields: user
func (_m *IUserRepository) CreateUser(user *aggregates.User) (*aggregates.User, error) {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 *aggregates.User
	var r1 error
	if rf, ok := ret.Get(0).(func(*aggregates.User) (*aggregates.User, error)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(*aggregates.User) *aggregates.User); ok {
		r0 = rf(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*aggregates.User)
		}
	}

	if rf, ok := ret.Get(1).(func(*aggregates.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IUserRepository_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type IUserRepository_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - user *aggregates.User
func (_e *IUserRepository_Expecter) CreateUser(user interface{}) *IUserRepository_CreateUser_Call {
	return &IUserRepository_CreateUser_Call{Call: _e.mock.On("CreateUser", user)}
}

func (_c *IUserRepository_CreateUser_Call) Run(run func(user *aggregates.User)) *IUserRepository_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*aggregates.User))
	})
	return _c
}

func (_c *IUserRepository_CreateUser_Call) Return(_a0 *aggregates.User, _a1 error) *IUserRepository_CreateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IUserRepository_CreateUser_Call) RunAndReturn(run func(*aggregates.User) (*aggregates.User, error)) *IUserRepository_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUser provides a mock function with given fields: userId
func (_m *IUserRepository) DeleteUser(userId string) error {
	ret := _m.Called(userId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IUserRepository_DeleteUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUser'
type IUserRepository_DeleteUser_Call struct {
	*mock.Call
}

// DeleteUser is a helper method to define mock.On call
//   - userId string
func (_e *IUserRepository_Expecter) DeleteUser(userId interface{}) *IUserRepository_DeleteUser_Call {
	return &IUserRepository_DeleteUser_Call{Call: _e.mock.On("DeleteUser", userId)}
}

func (_c *IUserRepository_DeleteUser_Call) Run(run func(userId string)) *IUserRepository_DeleteUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *IUserRepository_DeleteUser_Call) Return(_a0 error) *IUserRepository_DeleteUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IUserRepository_DeleteUser_Call) RunAndReturn(run func(string) error) *IUserRepository_DeleteUser_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUser provides a mock function with given fields: user
func (_m *IUserRepository) UpdateUser(user *aggregates.User) (*aggregates.User, error) {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 *aggregates.User
	var r1 error
	if rf, ok := ret.Get(0).(func(*aggregates.User) (*aggregates.User, error)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(*aggregates.User) *aggregates.User); ok {
		r0 = rf(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*aggregates.User)
		}
	}

	if rf, ok := ret.Get(1).(func(*aggregates.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IUserRepository_UpdateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUser'
type IUserRepository_UpdateUser_Call struct {
	*mock.Call
}

// UpdateUser is a helper method to define mock.On call
//   - user *aggregates.User
func (_e *IUserRepository_Expecter) UpdateUser(user interface{}) *IUserRepository_UpdateUser_Call {
	return &IUserRepository_UpdateUser_Call{Call: _e.mock.On("UpdateUser", user)}
}

func (_c *IUserRepository_UpdateUser_Call) Run(run func(user *aggregates.User)) *IUserRepository_UpdateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*aggregates.User))
	})
	return _c
}

func (_c *IUserRepository_UpdateUser_Call) Return(_a0 *aggregates.User, _a1 error) *IUserRepository_UpdateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IUserRepository_UpdateUser_Call) RunAndReturn(run func(*aggregates.User) (*aggregates.User, error)) *IUserRepository_UpdateUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewIUserRepository creates a new instance of IUserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *IUserRepository {
	mock := &IUserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
