// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	aggregates "api.ddd/src/domain/aggregates"

	mock "github.com/stretchr/testify/mock"
)

// IUserFinder is an autogenerated mock type for the IUserFinder type
type IUserFinder struct {
	mock.Mock
}

type IUserFinder_Expecter struct {
	mock *mock.Mock
}

func (_m *IUserFinder) EXPECT() *IUserFinder_Expecter {
	return &IUserFinder_Expecter{mock: &_m.Mock}
}

// GetAllUsers provides a mock function with given fields:
func (_m *IUserFinder) GetAllUsers() ([]*aggregates.User, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllUsers")
	}

	var r0 []*aggregates.User
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*aggregates.User, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*aggregates.User); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*aggregates.User)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IUserFinder_GetAllUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllUsers'
type IUserFinder_GetAllUsers_Call struct {
	*mock.Call
}

// GetAllUsers is a helper method to define mock.On call
func (_e *IUserFinder_Expecter) GetAllUsers() *IUserFinder_GetAllUsers_Call {
	return &IUserFinder_GetAllUsers_Call{Call: _e.mock.On("GetAllUsers")}
}

func (_c *IUserFinder_GetAllUsers_Call) Run(run func()) *IUserFinder_GetAllUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IUserFinder_GetAllUsers_Call) Return(_a0 []*aggregates.User, _a1 error) *IUserFinder_GetAllUsers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IUserFinder_GetAllUsers_Call) RunAndReturn(run func() ([]*aggregates.User, error)) *IUserFinder_GetAllUsers_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserById provides a mock function with given fields: userId
func (_m *IUserFinder) GetUserById(userId string) (*aggregates.User, error) {
	ret := _m.Called(userId)

	if len(ret) == 0 {
		panic("no return value specified for GetUserById")
	}

	var r0 *aggregates.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*aggregates.User, error)); ok {
		return rf(userId)
	}
	if rf, ok := ret.Get(0).(func(string) *aggregates.User); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*aggregates.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IUserFinder_GetUserById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserById'
type IUserFinder_GetUserById_Call struct {
	*mock.Call
}

// GetUserById is a helper method to define mock.On call
//   - userId string
func (_e *IUserFinder_Expecter) GetUserById(userId interface{}) *IUserFinder_GetUserById_Call {
	return &IUserFinder_GetUserById_Call{Call: _e.mock.On("GetUserById", userId)}
}

func (_c *IUserFinder_GetUserById_Call) Run(run func(userId string)) *IUserFinder_GetUserById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *IUserFinder_GetUserById_Call) Return(_a0 *aggregates.User, _a1 error) *IUserFinder_GetUserById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IUserFinder_GetUserById_Call) RunAndReturn(run func(string) (*aggregates.User, error)) *IUserFinder_GetUserById_Call {
	_c.Call.Return(run)
	return _c
}

// NewIUserFinder creates a new instance of IUserFinder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIUserFinder(t interface {
	mock.TestingT
	Cleanup(func())
}) *IUserFinder {
	mock := &IUserFinder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
