// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	gin "github.com/gin-gonic/gin"
	mock "github.com/stretchr/testify/mock"
)

// IHealthController is an autogenerated mock type for the IHealthController type
type IHealthController struct {
	mock.Mock
}

type IHealthController_Expecter struct {
	mock *mock.Mock
}

func (_m *IHealthController) EXPECT() *IHealthController_Expecter {
	return &IHealthController_Expecter{mock: &_m.Mock}
}

// Health provides a mock function with given fields: ctx
func (_m *IHealthController) Health(ctx *gin.Context) {
	_m.Called(ctx)
}

// IHealthController_Health_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Health'
type IHealthController_Health_Call struct {
	*mock.Call
}

// Health is a helper method to define mock.On call
//   - ctx *gin.Context
func (_e *IHealthController_Expecter) Health(ctx interface{}) *IHealthController_Health_Call {
	return &IHealthController_Health_Call{Call: _e.mock.On("Health", ctx)}
}

func (_c *IHealthController_Health_Call) Run(run func(ctx *gin.Context)) *IHealthController_Health_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context))
	})
	return _c
}

func (_c *IHealthController_Health_Call) Return() *IHealthController_Health_Call {
	_c.Call.Return()
	return _c
}

func (_c *IHealthController_Health_Call) RunAndReturn(run func(*gin.Context)) *IHealthController_Health_Call {
	_c.Call.Return(run)
	return _c
}

// NewIHealthController creates a new instance of IHealthController. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIHealthController(t interface {
	mock.TestingT
	Cleanup(func())
}) *IHealthController {
	mock := &IHealthController{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
