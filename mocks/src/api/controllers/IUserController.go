// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	gin "github.com/gin-gonic/gin"
	mock "github.com/stretchr/testify/mock"
)

// IUserController is an autogenerated mock type for the IUserController type
type IUserController struct {
	mock.Mock
}

type IUserController_Expecter struct {
	mock *mock.Mock
}

func (_m *IUserController) EXPECT() *IUserController_Expecter {
	return &IUserController_Expecter{mock: &_m.Mock}
}

// CreateUser provides a mock function with given fields: ctx
func (_m *IUserController) CreateUser(ctx *gin.Context) {
	_m.Called(ctx)
}

// IUserController_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type IUserController_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - ctx *gin.Context
func (_e *IUserController_Expecter) CreateUser(ctx interface{}) *IUserController_CreateUser_Call {
	return &IUserController_CreateUser_Call{Call: _e.mock.On("CreateUser", ctx)}
}

func (_c *IUserController_CreateUser_Call) Run(run func(ctx *gin.Context)) *IUserController_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context))
	})
	return _c
}

func (_c *IUserController_CreateUser_Call) Return() *IUserController_CreateUser_Call {
	_c.Call.Return()
	return _c
}

func (_c *IUserController_CreateUser_Call) RunAndReturn(run func(*gin.Context)) *IUserController_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUser provides a mock function with given fields: ctx
func (_m *IUserController) DeleteUser(ctx *gin.Context) {
	_m.Called(ctx)
}

// IUserController_DeleteUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUser'
type IUserController_DeleteUser_Call struct {
	*mock.Call
}

// DeleteUser is a helper method to define mock.On call
//   - ctx *gin.Context
func (_e *IUserController_Expecter) DeleteUser(ctx interface{}) *IUserController_DeleteUser_Call {
	return &IUserController_DeleteUser_Call{Call: _e.mock.On("DeleteUser", ctx)}
}

func (_c *IUserController_DeleteUser_Call) Run(run func(ctx *gin.Context)) *IUserController_DeleteUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context))
	})
	return _c
}

func (_c *IUserController_DeleteUser_Call) Return() *IUserController_DeleteUser_Call {
	_c.Call.Return()
	return _c
}

func (_c *IUserController_DeleteUser_Call) RunAndReturn(run func(*gin.Context)) *IUserController_DeleteUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllUsers provides a mock function with given fields: ctx
func (_m *IUserController) GetAllUsers(ctx *gin.Context) {
	_m.Called(ctx)
}

// IUserController_GetAllUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllUsers'
type IUserController_GetAllUsers_Call struct {
	*mock.Call
}

// GetAllUsers is a helper method to define mock.On call
//   - ctx *gin.Context
func (_e *IUserController_Expecter) GetAllUsers(ctx interface{}) *IUserController_GetAllUsers_Call {
	return &IUserController_GetAllUsers_Call{Call: _e.mock.On("GetAllUsers", ctx)}
}

func (_c *IUserController_GetAllUsers_Call) Run(run func(ctx *gin.Context)) *IUserController_GetAllUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context))
	})
	return _c
}

func (_c *IUserController_GetAllUsers_Call) Return() *IUserController_GetAllUsers_Call {
	_c.Call.Return()
	return _c
}

func (_c *IUserController_GetAllUsers_Call) RunAndReturn(run func(*gin.Context)) *IUserController_GetAllUsers_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserById provides a mock function with given fields: ctx
func (_m *IUserController) GetUserById(ctx *gin.Context) {
	_m.Called(ctx)
}

// IUserController_GetUserById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserById'
type IUserController_GetUserById_Call struct {
	*mock.Call
}

// GetUserById is a helper method to define mock.On call
//   - ctx *gin.Context
func (_e *IUserController_Expecter) GetUserById(ctx interface{}) *IUserController_GetUserById_Call {
	return &IUserController_GetUserById_Call{Call: _e.mock.On("GetUserById", ctx)}
}

func (_c *IUserController_GetUserById_Call) Run(run func(ctx *gin.Context)) *IUserController_GetUserById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context))
	})
	return _c
}

func (_c *IUserController_GetUserById_Call) Return() *IUserController_GetUserById_Call {
	_c.Call.Return()
	return _c
}

func (_c *IUserController_GetUserById_Call) RunAndReturn(run func(*gin.Context)) *IUserController_GetUserById_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUser provides a mock function with given fields: ctx
func (_m *IUserController) UpdateUser(ctx *gin.Context) {
	_m.Called(ctx)
}

// IUserController_UpdateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUser'
type IUserController_UpdateUser_Call struct {
	*mock.Call
}

// UpdateUser is a helper method to define mock.On call
//   - ctx *gin.Context
func (_e *IUserController_Expecter) UpdateUser(ctx interface{}) *IUserController_UpdateUser_Call {
	return &IUserController_UpdateUser_Call{Call: _e.mock.On("UpdateUser", ctx)}
}

func (_c *IUserController_UpdateUser_Call) Run(run func(ctx *gin.Context)) *IUserController_UpdateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context))
	})
	return _c
}

func (_c *IUserController_UpdateUser_Call) Return() *IUserController_UpdateUser_Call {
	_c.Call.Return()
	return _c
}

func (_c *IUserController_UpdateUser_Call) RunAndReturn(run func(*gin.Context)) *IUserController_UpdateUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewIUserController creates a new instance of IUserController. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIUserController(t interface {
	mock.TestingT
	Cleanup(func())
}) *IUserController {
	mock := &IUserController{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
